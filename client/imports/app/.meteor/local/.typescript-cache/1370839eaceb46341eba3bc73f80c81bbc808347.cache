{"code":"var core_1 = require('@angular/core');\r\nvar router_1 = require('@angular/router');\r\nvar Subject_1 = require('rxjs/Subject');\r\nvar AlertService = (function () {\r\n    function AlertService(router) {\r\n        var _this = this;\r\n        this.router = router;\r\n        this.subject = new Subject_1.Subject();\r\n        this.keepAfterNavigationChange = false;\r\n        // clear alert massage on route change\r\n        router.events.subscribe(function (event) {\r\n            if (event instanceof router_1.NavigationStart) {\r\n                if (_this.keepAfterNavigationChange) {\r\n                    // only keep for a single location change\r\n                    _this.keepAfterNavigationChange = false;\r\n                }\r\n                else {\r\n                    // clear alert\r\n                    _this.subject.next();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    AlertService.prototype.success = function (message, keepAfterNavigationChange) {\r\n        if (keepAfterNavigationChange === void 0) { keepAfterNavigationChange = false; }\r\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\r\n        this.subject.next({ type: 'success', text: message });\r\n    };\r\n    AlertService.prototype.error = function (message, keepAfterNavigationChange) {\r\n        if (keepAfterNavigationChange === void 0) { keepAfterNavigationChange = false; }\r\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\r\n        this.subject.next({ type: 'error', text: message });\r\n    };\r\n    AlertService.prototype.getMessage = function () {\r\n        return this.subject.asObservable();\r\n    };\r\n    AlertService = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [Object])\r\n    ], AlertService);\r\n    return AlertService;\r\n}());\r\nexports.AlertService = AlertService;\r\n//# sourceMappingURL=alert.service.js.map","sourceMap":{"version":3,"file":"alert.service.js","sourceRoot":"","sources":["client/imports/app/_services/alert.service.ts"],"names":[],"mappings":"AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAAwC,iBAAiB,CAAC,CAAA;AAE1D,wBAAwB,cAAc,CAAC,CAAA;AAGvC;IAIC,sBAAoB,MAAc;QAJnC,iBAkCC;QA9BoB,WAAM,GAAN,MAAM,CAAQ;QAH1B,YAAO,GAAG,IAAI,iBAAO,EAAO,CAAC;QAC7B,8BAAyB,GAAG,KAAK,CAAC;QAGzC,sCAAsC;QACtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;YAC5B,EAAE,CAAC,CAAC,KAAK,YAAY,wBAAe,CAAC,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;oBACpC,yCAAyC;oBACzC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBACxC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,cAAc;oBACd,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACtB,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,yBAAiC;QAAjC,yCAAiC,GAAjC,iCAAiC;QACzD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,4BAAK,GAAL,UAAM,OAAe,EAAE,yBAAiC;QAAjC,yCAAiC,GAAjC,iCAAiC;QACvD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,iCAAU,GAAV;QACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAhCF;QAAC,iBAAU,EAAE;;oBAAA;IAmCb,mBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,oBAAY,eAkCxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AlertService {\n\tprivate subject = new Subject<any>();\n\tprivate keepAfterNavigationChange = false;\n\n\tconstructor(private router: Router) {\n\t\t// clear alert massage on route change\n\t\trouter.events.subscribe(event => {\n\t\t\tif (event instanceof NavigationStart) {\n\t\t\t\tif (this.keepAfterNavigationChange) {\n\t\t\t\t\t// only keep for a single location change\n\t\t\t\t\tthis.keepAfterNavigationChange = false;\n\t\t\t\t} else {\n\t\t\t\t\t\t// clear alert\n\t\t\t\t\t\tthis.subject.next();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tsuccess(message: string, keepAfterNavigationChange = false) {\n\t\tthis.keepAfterNavigationChange = keepAfterNavigationChange;\n\t\tthis.subject.next({ type: 'success', text: message });\n\t}\n\n\terror(message: string, keepAfterNavigationChange = false) {\n\t\tthis.keepAfterNavigationChange = keepAfterNavigationChange;\n\t\tthis.subject.next({ type: 'error', text: message });\n\t}\n\n\tgetMessage() : Observable<any> {\n\t\treturn this.subject.asObservable();\n\t}\n\n\n}"]},"version":"1","isExternal":true,"references":{"files":[],"modules":[],"typings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2347,"fileName":"client/imports/app/_services/alert.service.ts","message":"Untyped function calls may not accept type arguments.","line":8,"column":20},{"code":2304,"fileName":"client/imports/app/_services/alert.service.ts","message":"Cannot find name 'Router'.","line":11,"column":30},{"code":2304,"fileName":"client/imports/app/_services/alert.service.ts","message":"Cannot find name 'Observable'.","line":36,"column":17}]},"hash":"1370839eaceb46341eba3bc73f80c81bbc808347"}