{"code":"var core_1 = require('@angular/core');\r\nvar http_1 = require('@angular/http');\r\nvar UserService = (function () {\r\n    function UserService(http) {\r\n        this.http = http;\r\n    }\r\n    UserService.prototype.getAll = function () {\r\n        return this.http.get('/api/users', this.jwt()).map(function (response) { return response.json(); });\r\n    };\r\n    UserService.prototype.getById = function (id) {\r\n        return this.http.get('/api/users/' + id, this.jwt()).map(function (response) { return response.json(); });\r\n    };\r\n    UserService.prototype.create = function (user) {\r\n        return this.http.post('/api/users', user, this.jwt()).map(function (response) { return response.json(); });\r\n    };\r\n    UserService.prototype.update = function (user) {\r\n        return this.http.put('/api/users/' + user.id, user, this.jwt()).map(function (response) { return response.json(); });\r\n    };\r\n    UserService.prototype.delete = function (id) {\r\n        return this.http.delete('/api/users/' + id, this.jwt()).map(function (response) { return response.json(); });\r\n    };\r\n    // private helper methods\r\n    UserService.prototype.jwt = function () {\r\n        // create authorization header with jwt token\r\n        var currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n        if (currentUser && currentUser.token) {\r\n            var headers = new http_1.Headers({ 'Authorization': 'Bearer ' + currentUser.token });\r\n            return new http_1.RequestOptions({ headers: headers });\r\n        }\r\n    };\r\n    UserService = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [Object])\r\n    ], UserService);\r\n    return UserService;\r\n}());\r\nexports.UserService = UserService;\r\n//# sourceMappingURL=user.service.js.map","sourceMap":{"version":3,"file":"user.service.js","sourceRoot":"","sources":["client/imports/app/_services/user.service.ts"],"names":[],"mappings":"AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwD,eAAe,CAAC,CAAA;AAKxE;IACI,qBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IAEnC,4BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAChG,CAAC;IAED,6BAAO,GAAP,UAAQ,EAAU;QACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACtG,CAAC;IAED,4BAAM,GAAN,UAAO,IAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACvG,CAAC;IAED,4BAAM,GAAN,UAAO,IAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACjH,CAAC;IAED,4BAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACzG,CAAC;IAED,yBAAyB;IAEjB,yBAAG,GAAX;QACI,6CAA6C;QAC7C,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;QAClE,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACnC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;IAjCL;QAAC,iBAAU,EAAE;;mBAAA;IAkCb,kBAAC;AAAD,CAAC,AAjCD,IAiCC;AAjCY,mBAAW,cAiCvB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions, Response } from '@angular/http';\n \nimport { User } from '../_models/index';\n \n@Injectable()\nexport class UserService {\n    constructor(private http: Http) { }\n \n    getAll() {\n        return this.http.get('/api/users', this.jwt()).map((response: Response) => response.json());\n    }\n \n    getById(id: number) {\n        return this.http.get('/api/users/' + id, this.jwt()).map((response: Response) => response.json());\n    }\n \n    create(user: User) {\n        return this.http.post('/api/users', user, this.jwt()).map((response: Response) => response.json());\n    }\n \n    update(user: User) {\n        return this.http.put('/api/users/' + user.id, user, this.jwt()).map((response: Response) => response.json());\n    }\n \n    delete(id: number) {\n        return this.http.delete('/api/users/' + id, this.jwt()).map((response: Response) => response.json());\n    }\n \n    // private helper methods\n \n    private jwt() {\n        // create authorization header with jwt token\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        if (currentUser && currentUser.token) {\n            let headers = new Headers({ 'Authorization': 'Bearer ' + currentUser.token });\n            return new RequestOptions({ headers: headers });\n        }\n    }\n}"]},"version":"1","isExternal":true,"references":{"files":[],"modules":["client/imports/app/_models/index.ts"],"typings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Http'.","line":8,"column":31},{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Response'.","line":11,"column":71},{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Response'.","line":15,"column":77},{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Response'.","line":19,"column":78},{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Response'.","line":23,"column":88},{"code":2304,"fileName":"client/imports/app/_services/user.service.ts","message":"Cannot find name 'Response'.","line":27,"column":80}]},"hash":"379fd7ccdf6fd29dfba21002055bfbe09a4dd86a"}